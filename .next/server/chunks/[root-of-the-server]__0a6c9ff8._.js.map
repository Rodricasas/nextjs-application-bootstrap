{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/tickets/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const body = await request.json()\n    const ticketId = parseInt(params.id)\n\n    if (isNaN(ticketId)) {\n      return NextResponse.json(\n        { error: 'ID de ticket inválido' },\n        { status: 400 }\n      )\n    }\n\n    // Convert date strings to Date objects if they exist\n    const updateData: any = { ...body }\n    \n    if (updateData.fecha_entrada) {\n      updateData.fecha_entrada = new Date(updateData.fecha_entrada)\n    }\n    if (updateData.fecha_inicio_servicio) {\n      updateData.fecha_inicio_servicio = new Date(updateData.fecha_inicio_servicio)\n    }\n    if (updateData.fecha_fin_servicio) {\n      updateData.fecha_fin_servicio = new Date(updateData.fecha_fin_servicio)\n    }\n    \n    // Convert numeric fields\n    if (updateData.costo_repuestos !== undefined) {\n      updateData.costo_repuestos = parseFloat(updateData.costo_repuestos) || 0\n    }\n    if (updateData.costo_mano_obra !== undefined) {\n      updateData.costo_mano_obra = parseFloat(updateData.costo_mano_obra) || 0\n    }\n    if (updateData.costos_externos_estimados !== undefined) {\n      updateData.costos_externos_estimados = parseFloat(updateData.costos_externos_estimados) || 0\n    }\n\n    const ticket = await prisma.ticket.update({\n      where: { id: ticketId },\n      data: updateData\n    })\n\n    return NextResponse.json({ data: ticket })\n  } catch (error: any) {\n    console.error('Error al actualizar ticket:', error)\n    \n    if (error.code === 'P2025') {\n      return NextResponse.json(\n        { error: 'Ticket no encontrado' },\n        { status: 404 }\n      )\n    }\n    \n    if (error.code === 'P2002') {\n      return NextResponse.json(\n        { error: 'El número de ticket ya existe' },\n        { status: 400 }\n      )\n    }\n    \n    return NextResponse.json(\n      { error: 'Error al actualizar el ticket' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const ticketId = parseInt(params.id)\n\n    if (isNaN(ticketId)) {\n      return NextResponse.json(\n        { error: 'ID de ticket inválido' },\n        { status: 400 }\n      )\n    }\n\n    await prisma.ticket.delete({\n      where: { id: ticketId }\n    })\n\n    return NextResponse.json({ \n      data: 'Ticket eliminado exitosamente' \n    })\n  } catch (error: any) {\n    console.error('Error al eliminar ticket:', error)\n    \n    if (error.code === 'P2025') {\n      return NextResponse.json(\n        { error: 'Ticket no encontrado' },\n        { status: 404 }\n      )\n    }\n    \n    return NextResponse.json(\n      { error: 'Error al eliminar el ticket' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,WAAW,SAAS,OAAO,EAAE;QAEnC,IAAI,MAAM,WAAW;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwB,GACjC;gBAAE,QAAQ;YAAI;QAElB;QAEA,qDAAqD;QACrD,MAAM,aAAkB;YAAE,GAAG,IAAI;QAAC;QAElC,IAAI,WAAW,aAAa,EAAE;YAC5B,WAAW,aAAa,GAAG,IAAI,KAAK,WAAW,aAAa;QAC9D;QACA,IAAI,WAAW,qBAAqB,EAAE;YACpC,WAAW,qBAAqB,GAAG,IAAI,KAAK,WAAW,qBAAqB;QAC9E;QACA,IAAI,WAAW,kBAAkB,EAAE;YACjC,WAAW,kBAAkB,GAAG,IAAI,KAAK,WAAW,kBAAkB;QACxE;QAEA,yBAAyB;QACzB,IAAI,WAAW,eAAe,KAAK,WAAW;YAC5C,WAAW,eAAe,GAAG,WAAW,WAAW,eAAe,KAAK;QACzE;QACA,IAAI,WAAW,eAAe,KAAK,WAAW;YAC5C,WAAW,eAAe,GAAG,WAAW,WAAW,eAAe,KAAK;QACzE;QACA,IAAI,WAAW,yBAAyB,KAAK,WAAW;YACtD,WAAW,yBAAyB,GAAG,WAAW,WAAW,yBAAyB,KAAK;QAC7F;QAEA,MAAM,SAAS,MAAM,sHAAA,CAAA,SAAM,CAAC,MAAM,CAAC,MAAM,CAAC;YACxC,OAAO;gBAAE,IAAI;YAAS;YACtB,MAAM;QACR;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,MAAM;QAAO;IAC1C,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,+BAA+B;QAE7C,IAAI,MAAM,IAAI,KAAK,SAAS;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,MAAM,IAAI,KAAK,SAAS;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgC,GACzC;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAgC,GACzC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,OACpB,OAAoB,EACpB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,WAAW,SAAS,OAAO,EAAE;QAEnC,IAAI,MAAM,WAAW;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwB,GACjC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,sHAAA,CAAA,SAAM,CAAC,MAAM,CAAC,MAAM,CAAC;YACzB,OAAO;gBAAE,IAAI;YAAS;QACxB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,MAAM;QACR;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,6BAA6B;QAE3C,IAAI,MAAM,IAAI,KAAK,SAAS;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA8B,GACvC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}